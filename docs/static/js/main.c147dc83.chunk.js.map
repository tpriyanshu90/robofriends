{"version":3,"sources":["components/card/Card.js","components/SearchBox/SearchBox.js","components/ErrorBoundary.js","App.js","action.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","alt","concat","this","props","username","src","id","name","email","Component","SearchBox","type","placeholder","onChange","searchChange","ErrorBoundary","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","err","info","setState","children","App","console","log","_this2","fetch","then","response","json","users","onRobotsChange","i","_this$props","robots","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox_SearchBox","components_ErrorBoundary","map","components_card_Card","key","connect","dispatch","event","text","target","value","payload","robotsArr","getRobotsArr","initalState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","store","createStore","arguments","undefined","action","assign","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c147dc83.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Card.css';\n\nclass Card extends Component {\n\trender(){\n\t\treturn(\n\t\t\t<div className = \"Card dib tc br3 ma2 pa3 grow bw2 shadow-5 \">\n\t\t\t\t<img alt = {`${this.props.username}`} \n\t\t\t\t\tsrc = {`https://robohash.org/${this.props.id}test?200x200`} />\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{this.props.name}</h2>\n\t\t\t\t\t<p>{this.props.email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport './SearchBox.css';\n\nclass SearchBox extends Component {\n\trender(){\n\t\treturn(\n\t\t\t<div className=\"pa2\">\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t\t\t<input className=\"pa3 ba b--green\"\n\t\t\t\t\t   type=\"search\"\n\t\t\t\t\t   placeholder=\"search robots\"\n\t\t\t\t\t   onChange = {this.props.searchChange} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\tcomponentDidCatch(err, info) {\n\t\tthis.setState({ hasError : true });\n\t}\n\trender() {\n\t\tif(this.state.hasError) {\n\t\t\treturn <h1>Ooops! Thats is not good </h1>\n\t\t} else {\n\t\t\treturn this.props.children\n\t\t}\n\t}\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Card from './components/card/Card';\nimport SearchBox from './components/SearchBox/SearchBox';\nimport './App.css';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport { setSearchField, getRobotsArr } from './action';\n\nconst mapStateToProps = state => {\n  console.log(\"1----------\");\n  return {\n    searchField : state.searchField, //searchField attribute gets added to the props\n    robots : state.robots\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  console.log(\"2----------\"); //this also goes to searchField.\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRobotsChange: (robotsArr) => dispatch(getRobotsArr(robotsArr))\n  }      \n}\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    console.log(\"3---constructor-------\",this.props);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => {\n        this.props.onRobotsChange(users);\n    });\n    console.log(\"4-----CDM-----\");\n  }\n\n  render() {\n    var i =1;\n    console.log(\"in render----------\", i++, this.props);\n    const { robots, searchField, onSearchChange } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    if (!robots.length) {\n      return(\n          <div className=\"spinner\">\n            <div className=\"bounce1\"></div>\n            <div className=\"bounce2\"></div>\n            <div className=\"bounce3\"></div>\n          </div>\n      );\n    }\n    else {\n      return (\n        <div className=\"App tc\">\n          {/*<Header/>*/}\n          <SearchBox searchChange = {onSearchChange} />\n\n          <ErrorBoundary>\n            {filteredRobots.map((robot, i) => {\n              return <Card key = {i} username = {robot.username} id = {robot.id} name = {robot.name} email = {robot.email}/>\n            })}\n          </ErrorBoundary>\n          \n          \n          {/*<Footer/>*/}\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, GET_ROBOTS } from './constants.js';\nexport const setSearchField = (text) => {\n\tconsole.log(text);\t\n\treturn ({\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n\t});\n}\n\nexport const getRobotsArr = (robotsArr) => {\n\tconsole.log(\"---in robots action\");\n\treturn ({\n\t\ttype: GET_ROBOTS,\n\t\tpayload: robotsArr\n\t});\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const GET_ROBOTS = 'GET_ROBOTS';","import { CHANGE_SEARCH_FIELD, GET_ROBOTS } from './constants.js';\nconst initalState = {\n\tsearchField: '',\n\trobots: []\n}\n//Reduers get executed first of they are connected to App.\n\nexport const searchRobots = (state = initalState, action = {}) => {\n\tconsole.log(\"------in reducers-------\",action.type);\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD: \n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tcase GET_ROBOTS:\n\t\t\treturn Object.assign({}, state, { robots : action.payload });\t\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport App from './App';\nimport { searchRobots } from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst store = createStore(searchRobots, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n\t\t\t\t<Provider store = {store}>\n\t\t\t\t\t<App/>\n\t\t\t\t</Provider>\n\t\t\t\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}